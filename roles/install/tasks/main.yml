---
# INSTALL role main tasks.
#
# Description: Common set of tasks for all game installations supported by
#   Smoke.  The installation is broken down into 4 phases:
#


# Collect System information
#     This information is used to collect information about your system and to
#     validate the presence of the game files and installers.
- name: Collect System information
  block:
      # Check screen resolution to configure game to match your screen
      - name: Collect System Info
        ansible.builtin.include_tasks: collect_system_info.yml

      # Skip extracting if installer is not present on system
      - name: Perform stat on install file
        ansible.builtin.stat:
            path: "{{ installer.path }}"
        register: install_file

      # Skip extracting if game files are present on system
      - name: Perform stat on install_record file
        ansible.builtin.stat:
            path: "{{ install_record }}"
        register: game_installed
  # End of Collect System Information block

# Prerequisite system configurations needed to extract games
#     Changes required to the system prior to being able to install
#     the game.
- name: Pre-Installation Requirements
  block:

      # Dependencies include programs needed by game
      - name: Install listed dependencies
        ansible.builtin.include_tasks: install_dependencies.yml
        when: dependencies is defined

      # Copying game files will fail if the directories do not exist
      - name: Create directory tree for game files
        ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
        loop: "{{ directories }}"
        loop_control:
            label: "{{ item }}"
        when: directories is defined

      # Desktop entry and desktop icons will fail if the directories don't exis
      - name: Create common system directories
        ansible.builtin.include_tasks: create_system_directories.yml

      - name: Download desktop icons
        ansible.builtin.include_tasks: download_icons.yml
        when: icons is defined
    # End of Pre-Installation block

# Run the native linux installer.
- name: Install game as packaged by GOG.com
  block:
      
      - name: Install Native Linux game
        ansible.builtin.include_tasks: run_mojo.yml
        when: installer.type == "native"

      # Create an installed_indicator file in smoke config
      - name: Create install record
        ansible.builtin.file:
            path: "{{ install_record }}"
            state: touch
            mode: "0755"
            modification_time: preserve
            access_time: preserve
  when: 
      - not game_installed.stat.exists
      - install_file.stat.exists
      - installer.type == "native"

# Extract files from the installer into the appropriate location
#     This block is executed if the game is to be installed to work
#     with a different, usually Open-Source, engine.
- name: Extract game files from the installer
  block:

      - name: Create temporary working directory for installation files
        ansible.builtin.tempfile:
            state: directory
        register: tmp_dir

      - name: Extract MojoSetup files to temporary directory
        ansible.builtin.include_tasks: extract_mojo.yml
        when: installer.type == "mojosetup"

      - name: Extract InnoSetup files to temporary directory
        ansible.builtin.include_tasks: extract_inno.yml
        when: installer.type == "innosetup"

      # Move only the required files from the temp directory
      - name: Copy games files from the temporary directory
        ansible.builtin.include_tasks: copy_files.yml
        when: game_files is defined

      # Convert CD music tracks to a supported format for game engine
      - name: Extract music tracks from cd image files
        ansible.builtin.include_tasks: rip_cd_tracks.yml
        loop: "{{ cd_images }}"
        loop_control:
            label: "{{ item.dest }}"
        when: cd_images is defined

      # Create an installed_indicator file in smoke config
      - name: Create install record
        ansible.builtin.file:
            path: "{{ install_record }}"
            state: touch
            mode: "0755"
            modification_time: preserve
            access_time: preserve

  when:
      - not game_installed.stat.exists
      - install_file.stat.exists
      - (installer.type == "innosetup" or installer.type == "mojosetup")

  always:
      # Delete the temporary directory to recover HDD space
      - name: Delete the temporary working directory
        ansible.builtin.file:
            path: "{{ tmp_dir.path }}"
            state: absent
        when: tmp_dir.path is defined
